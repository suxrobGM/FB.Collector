// <auto-generated />
using System;
using FBC.EntityFramework.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FBC.EntityFramework.DbMigrations.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220309035533_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CityUser", b =>
                {
                    b.Property<string>("LivedCitiesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PeopleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("LivedCitiesId", "PeopleId");

                    b.HasIndex("PeopleId");

                    b.ToTable("CityUser");
                });

            modelBuilder.Entity("EducationUser", b =>
                {
                    b.Property<string>("EducationsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StudentsId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("EducationsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("EducationUser");
                });

            modelBuilder.Entity("FBC.Domain.Entities.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("FBC.Domain.Entities.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("FBC.Domain.Entities.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("FBC.Domain.Entities.Education", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsHigherEducation")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("FBC.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("EndWorkDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCurrentlyWorking")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Position")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartWorkDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("FBC.Domain.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("FBC.Domain.Entities.Skill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("FBC.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CurrentCityId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ExternalId")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HeaderPhotoSrc")
                        .HasColumnType("longtext");

                    b.Property<string>("HometowId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsMyFriend")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("MemberSince")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProfilePhotoSrc")
                        .HasColumnType("longtext");

                    b.Property<string>("Quote")
                        .HasColumnType("longtext");

                    b.Property<string>("ReligiousView")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CurrentCityId")
                        .IsUnique();

                    b.HasIndex("HometowId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("LanguageUser", b =>
                {
                    b.Property<string>("LanguagesId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SpeakersId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("LanguagesId", "SpeakersId");

                    b.HasIndex("SpeakersId");

                    b.ToTable("LanguageUser");
                });

            modelBuilder.Entity("SkillUser", b =>
                {
                    b.Property<string>("SkillsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UsersId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("SkillsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("SkillUser");
                });

            modelBuilder.Entity("CityUser", b =>
                {
                    b.HasOne("FBC.Domain.Entities.City", null)
                        .WithMany()
                        .HasForeignKey("LivedCitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationUser", b =>
                {
                    b.HasOne("FBC.Domain.Entities.Education", null)
                        .WithMany()
                        .HasForeignKey("EducationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FBC.Domain.Entities.Contact", b =>
                {
                    b.HasOne("FBC.Domain.Entities.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBC.Domain.Entities.Employee", b =>
                {
                    b.HasOne("FBC.Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FBC.Domain.Entities.User", "User")
                        .WithMany("WorkPlaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FBC.Domain.Entities.User", b =>
                {
                    b.HasOne("FBC.Domain.Entities.City", "CurrentCity")
                        .WithOne()
                        .HasForeignKey("FBC.Domain.Entities.User", "CurrentCityId");

                    b.HasOne("FBC.Domain.Entities.City", "Hometown")
                        .WithOne()
                        .HasForeignKey("FBC.Domain.Entities.User", "HometowId");

                    b.Navigation("CurrentCity");

                    b.Navigation("Hometown");
                });

            modelBuilder.Entity("LanguageUser", b =>
                {
                    b.HasOne("FBC.Domain.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("SpeakersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillUser", b =>
                {
                    b.HasOne("FBC.Domain.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FBC.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FBC.Domain.Entities.Company", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("FBC.Domain.Entities.User", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("WorkPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
